{"remainingRequest":"D:\\Документы\\Desktop\\Web_Engineer_Challange\\client\\node_modules\\babel-loader\\lib\\index.js!D:\\Документы\\Desktop\\Web_Engineer_Challange\\client\\src\\ducks\\notification.js","dependencies":[{"path":"D:\\Документы\\Desktop\\Web_Engineer_Challange\\client\\src\\ducks\\notification.js","mtime":1547974670212},{"path":"D:\\Документы\\Desktop\\Web_Engineer_Challange\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1547970070918},{"path":"D:\\Документы\\Desktop\\Web_Engineer_Challange\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1547754015365}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callNotification = exports.requestNotification = exports.NOTIFICATION = exports.moduleName = undefined;\n\nvar _antd = require('antd');\n\nvar _reduxObservable = require('redux-observable');\n\nvar _operators = require('rxjs/operators');\n\nvar appName = \"wizard\";\nvar moduleName = exports.moduleName = \"notification\";\nvar NOTIFICATION = exports.NOTIFICATION = appName + '/' + moduleName + '/NOTIFICATION';\n\n// Actions\nvar requestNotification = exports.requestNotification = function requestNotification(type, success, duration, text) {\n  return { type: NOTIFICATION, payload: { type: type, success: success, text: text } };\n};\n\n// Epics\nvar callNotification = exports.callNotification = function callNotification(action$) {\n  return action$.pipe((0, _reduxObservable.ofType)(NOTIFICATION), (0, _operators.tap)(function (action) {\n    var _action$payload = action.payload,\n        type = _action$payload.type,\n        success = _action$payload.success,\n        _action$payload$durat = _action$payload.duration,\n        duration = _action$payload$durat === undefined ? 2 : _action$payload$durat,\n        text = _action$payload.text;\n\n    var description = text.toString().split('\\n')[0];\n    switch (type) {\n      case \"notification\":\n        success ? _antd.notification.success({ message: \"Success!\", description: description, duration: duration }) : _antd.notification.error({ message: \"Error!\", description: description, duration: duration });\n        break;\n      case \"message\":\n        success ? _antd.message.success(description, duration) : _antd.message.error(description, duration);\n        break;\n    }\n  }), (0, _operators.ignoreElements)());\n};",null]}